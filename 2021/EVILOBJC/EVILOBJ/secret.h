//
//  secret.h
//
//
//  Created by Murphy on 20/7/21. Based on a Grant Douglas (Hexploitable) idea and code \o/.
//

#ifndef secret_h
#define secret_h

#import <dlfcn.h>
#import <sys/types.h>
#import <sys/stat.h>



struct secret {
    int size;
    char key[256];
    char path[256];
};


typedef void* (*dlsym_ptr_t)(void* h, const char* s);
typedef int (*access_ptr_t)(const char *p, int m);
typedef int (*lstat_ptr_t)(const char *p, struct stat *s);


#define custom_exit() {\
    asm volatile (\
    "mov x0, 1\n"\
    "mov x16, 1\n"\
    "svc #128\n"\
    );\
    int* ptr = NULL;\
    *ptr = 1;\
}

struct secret secrets[] =
{
    {23,
        {0x6f, 0x62, 0x6a, 0x63, 0x5f, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x0},
        {0x40, 0x23, 0x1A, 0x13, 0x33, 0x04, 0x10, 0x06, 0x27, 0x0C, 0x01, 0x0A, 0x1C, 0x4D, 0x29, 0x1A, 0x3B, 0x04, 0x12, 0x49, 0x32, 0x15, 0x1E, 0x0}
    }, ///Applications/Cydia.app
    {24,
        {0x4f, 0x5f, 0x6a, 0x73, 0x5f, 0x6d, 0x71, 0x65, 0x53, 0x64, 0x53, 0x6e, 0x0},
        {0x60, 0x2a, 0x19, 0x1, 0x70, 0x1, 0x18, 0x7, 0x36, 0x1c, 0x36, 0xd, 0x60, 0x2c, 0x19, 0x1b, 0x72, 0x6, 0x14, 0x1c, 0x20, 0xd, 0x34, 0x0, 0x0}
    }, ////usr/libexec/ssh-keysign
    {20,
        {0x2f, 0x3f, 0x4f, 0x5f, 0x6f, 0x7d, 0xa1, 0x2, 0x43, 0x15, 0x7e, 0x54, 0x0},
        {0x0, 0x4f, 0x3d, 0x36, 0x19, 0x1c, 0xd5, 0x67, 0x6c, 0x63, 0x1f, 0x26, 0x0, 0x53, 0x26, 0x3d, 0x40, 0x1c, 0xd1, 0x76,0x0}
    }, ///private/var/lib/apt
    {12,
        {0x7f, 0x62, 0x1a, 0x63, 0x5f, 0x98, 0x13, 0x12, 0x22, 0x25, 0x1e, 0x44, 0x0},
        {0x50, 0x17, 0x69, 0x11, 0x70, 0xfa, 0x7a, 0x7c, 0xd, 0x56, 0x6d, 0x2c,0x0}
    }, ///usr/bin/ssh
    {14,
        {0x5f, 0x6a, 0x1, 0x63, 0x5f, 0x67, 0x72, 0x15, 0x43, 0x23, 0x6e, 0x34, 0x0},
        {0x70, 0x1c, 0x60, 0x11, 0x70, 0xb, 0x1b, 0x77, 0x6c, 0x40, 0x17, 0x50, 0x36, 0xb, 0x0}
    }, ///var/lib/cydia
    {23,
        {0x2f, 0x6f, 0x3, 0x63, 0x5f, 0x78, 0x33, 0x55, 0x63, 0x25, 0x5e, 0x24, 0x0},
        {0x0, 0x19, 0x62, 0x11, 0x70, 0xa, 0x5c, 0x3a, 0x17, 0xa, 0x70, 0x46, 0x4e, 0x1c, 0x6b, 0x3c, 0x37, 0x11, 0x40, 0x21, 0xc, 0x57, 0x27, 0x0}
    }, ///var/root/.bash_history
    {30,
        {0x6e, 0x6c, 0x4, 0x63, 0x5f, 0x48, 0x74, 0x11, 0x66, 0x35, 0x4e, 0x14, 0x0},
        {0x41, 0x19, 0x77, 0x11, 0x70, 0x24, 0x1d, 0x73, 0x3, 0x4d, 0x2b, 0x77, 0x41, 0xf, 0x7d, 0x7, 0x36, 0x29, 0x5b, 0x77, 0xf, 0x47, 0x23, 0x63, 0xf, 0x1e, 0x61, 0x4d, 0x2c, 0x20, 0x0}
    }, ///usr/libexec/cydia/firmware.sh
    {32,
        {0x1f, 0xff, 0x5, 0x45, 0x21, 0x44, 0x14, 0x17, 0x54, 0x33, 0x1e, 0x4, 0x0},
        {0x30, 0x9a, 0x71, 0x26, 0xe, 0x25, 0x64, 0x63, 0x7b, 0x43, 0x6c, 0x61, 0x79, 0x9a, 0x77, 0x20, 0x4f, 0x27, 0x71, 0x64, 0x7a, 0x57, 0x31, 0x67, 0x77, 0x9a, 0x66, 0x2e, 0x53, 0x25, 0x25, 0x79, 0x0}
    }, ///etc/apt/preferences.d/checkra1n
    {22,
        {0x23, 0x22, 0x21, 0x45, 0x46, 0x9, 0xa3, 0x47, 0x15, 0x34, 0xe6, 0x10, 0x0},
        {0xc, 0x57, 0x52, 0x37, 0x69, 0x7a, 0xc1, 0x2e, 0x7b, 0x1b, 0x80, 0x62, 0x4a, 0x46, 0x40, 0x68, 0x35, 0x6c, 0xd1, 0x31, 0x70, 0x46, 0x0}
    }, ///usr/sbin/frida-server
    {14,
        {0x21, 0x21, 0x20, 0x46, 0x56, 0xf9, 0xb3, 0x17, 0x25, 0x3e, 0xe6, 0x58, 0x0},
        {0xe, 0x54, 0x53, 0x34, 0x79, 0x95, 0xda, 0x75, 0xa, 0x58, 0x94, 0x31, 0x45, 0x40, 0x0}
    }, ///usr/lib/frida
    {32,
        {0x20, 0x20, 0x19, 0x47, 0x66, 0xe9, 0xc3, 0x47, 0x15, 0x22, 0x19, 0x49, 0x0},
        {0xf, 0x55, 0x6a, 0x35, 0x49, 0x85, 0xaa, 0x25, 0x3a, 0x44, 0x6b, 0x20, 0x44, 0x41, 0x36, 0x21, 0x14, 0x80, 0xa7, 0x26, 0x38, 0x43, 0x7e, 0x2c, 0x4e, 0x54, 0x37, 0x23, 0x1f, 0x85, 0xaa, 0x25, 0x0}
    } ///usr/lib/frida/frida-agent.dylib
};

#define ENOTIMELEFT (4 * NSEC_PER_SEC)
#define YEP 0

#define check(file_path, size, key) {\
    char real_path[size+1];\
    int j = 0;\
    for(int i = 0; i <= size; ++i) {\
        if (i == size)\
        {\
            real_path[i] = '\0';\
            break;\
        }\
        if (j == 12)\
        {\
            j = 0;\
        }\
        real_path[i] = (char)(file_path[i] ^ key[j]);\
        j++;\
    }\
    dlsym_ptr_t dlsym_ptr = (dlsym_ptr_t)dlsym(RTLD_SELF, "dlsym");\
    access_ptr_t access_ptr = (access_ptr_t)dlsym_ptr(RTLD_SELF, "access");\
    int found = access_ptr(real_path, F_OK);\
    if (found == YEP)\
    {\
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, ENOTIMELEFT), dispatch_get_main_queue(), ^{custom_exit()});\
    }\
    struct stat fs;\
    lstat_ptr_t lstat_ptr = (lstat_ptr_t)dlsym_ptr(RTLD_SELF, "lstat");\
    if (lstat_ptr(real_path, &fs) >= 0)\
    {\
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, ENOTIMELEFT), dispatch_get_main_queue(), ^{custom_exit()});\
    }\
}


#define check2(file_path, size, key) {\
    char real_path[size+1];\
    int j = 0;\
    for(int i = 0; i <= size; ++i) {\
        if (i == size)\
        {\
            real_path[i] = '\0';\
            break;\
        }\
        if (j == 12)\
        {\
            j = 0;\
        }\
        real_path[i] = (char)(file_path[i] ^ key[j]);\
        j++;\
    }\
    register uint64_t __x0 = (uint64_t)real_path; \
    register int __x1 asm("x1") = 0x0; \
    register int __x2 asm("x2") = 0x0; \
    register uint64_t __x16 asm("x16") = 0x21; \
    uint64_t __x0_result; \
    asm volatile (\
    "mov x0, %[reg0]\n"\
    "svc #128\n"\
    "mov %[res], x0\n"\
    "b.cc .+8\n"\
    "movn %[res], #0\n"\
    : [res] "=r" (__x0_result) \
    : [reg0] "r" (__x0), "r" (__x1), "r" (__x2), "r" (__x16) \
    : "memory", "x0"\
    );\
    if (__x0_result == 0)\
    {\
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, ENOTIMELEFT), dispatch_get_main_queue(), ^{custom_exit()});\
    }\
    }




#define yetAnotherantiRooting() {\
    struct secret *checks = secrets;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
    check2(checks->path, checks->size, checks->key);\
    checks++;\
}

#define antiRooting() {\
    struct secret *checks = secrets;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
    check(checks->path, checks->size, checks->key);\
    checks++;\
}

#endif /* secret_h */

